/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace RiskControl {
  export type AssessmentResultStruct = {
    creditLimit: BigNumberish;
    riskScore: BigNumberish;
    approved: boolean;
    clientId: string;
    timestamp: BigNumberish;
  };

  export type AssessmentResultStructOutput = [
    creditLimit: bigint,
    riskScore: bigint,
    approved: boolean,
    clientId: string,
    timestamp: bigint
  ] & {
    creditLimit: bigint;
    riskScore: bigint;
    approved: boolean;
    clientId: string;
    timestamp: bigint;
  };

  export type RiskParametersStruct = {
    incomeMultiplier: BigNumberish;
    riskThreshold: BigNumberish;
  };

  export type RiskParametersStructOutput = [
    incomeMultiplier: bigint,
    riskThreshold: bigint
  ] & { incomeMultiplier: bigint; riskThreshold: bigint };
}

export interface RiskControlInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assessRisk"
      | "assessmentResults"
      | "batchAssessRisk"
      | "getAllClientIds"
      | "getAssessmentCount"
      | "getAssessmentResult"
      | "getBatchAssessmentResults"
      | "getOwner"
      | "getRiskParameters"
      | "riskParameters"
      | "transferOwnership"
      | "updateRiskParameters"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssessmentPerformed"
      | "BatchAssessmentPerformed"
      | "ParametersUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "assessRisk",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "assessmentResults",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchAssessRisk",
    values: [BigNumberish[], BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllClientIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssessmentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssessmentResult",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchAssessmentResults",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRiskParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "riskParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRiskParameters",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "assessRisk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assessmentResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchAssessRisk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllClientIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssessmentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssessmentResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchAssessmentResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRiskParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "riskParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRiskParameters",
    data: BytesLike
  ): Result;
}

export namespace AssessmentPerformedEvent {
  export type InputTuple = [
    clientId: string,
    creditLimit: BigNumberish,
    riskScore: BigNumberish,
    approved: boolean,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    clientId: string,
    creditLimit: bigint,
    riskScore: bigint,
    approved: boolean,
    timestamp: bigint
  ];
  export interface OutputObject {
    clientId: string;
    creditLimit: bigint;
    riskScore: bigint;
    approved: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchAssessmentPerformedEvent {
  export type InputTuple = [count: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [count: bigint, timestamp: bigint];
  export interface OutputObject {
    count: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParametersUpdatedEvent {
  export type InputTuple = [timestamp: BigNumberish];
  export type OutputTuple = [timestamp: bigint];
  export interface OutputObject {
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RiskControl extends BaseContract {
  connect(runner?: ContractRunner | null): RiskControl;
  waitForDeployment(): Promise<this>;

  interface: RiskControlInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assessRisk: TypedContractMethod<
    [_age: BigNumberish, _annualIncome: BigNumberish, _clientId: string],
    [
      [bigint, bigint, boolean] & {
        creditLimit: bigint;
        riskScore: bigint;
        approved: boolean;
      }
    ],
    "nonpayable"
  >;

  assessmentResults: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, boolean, string, bigint] & {
        creditLimit: bigint;
        riskScore: bigint;
        approved: boolean;
        clientId: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  batchAssessRisk: TypedContractMethod<
    [_ages: BigNumberish[], _incomes: BigNumberish[], _clientIds: string[]],
    [bigint],
    "nonpayable"
  >;

  getAllClientIds: TypedContractMethod<[], [string[]], "view">;

  getAssessmentCount: TypedContractMethod<[], [bigint], "view">;

  getAssessmentResult: TypedContractMethod<
    [_clientId: string],
    [
      [bigint, bigint, boolean, bigint] & {
        creditLimit: bigint;
        riskScore: bigint;
        approved: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getBatchAssessmentResults: TypedContractMethod<
    [_clientIds: string[]],
    [RiskControl.AssessmentResultStructOutput[]],
    "view"
  >;

  getOwner: TypedContractMethod<[], [string], "view">;

  getRiskParameters: TypedContractMethod<
    [],
    [RiskControl.RiskParametersStructOutput],
    "view"
  >;

  riskParameters: TypedContractMethod<
    [],
    [[bigint, bigint] & { incomeMultiplier: bigint; riskThreshold: bigint }],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateRiskParameters: TypedContractMethod<
    [_incomeMultiplier: BigNumberish, _riskThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assessRisk"
  ): TypedContractMethod<
    [_age: BigNumberish, _annualIncome: BigNumberish, _clientId: string],
    [
      [bigint, bigint, boolean] & {
        creditLimit: bigint;
        riskScore: bigint;
        approved: boolean;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assessmentResults"
  ): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, boolean, string, bigint] & {
        creditLimit: bigint;
        riskScore: bigint;
        approved: boolean;
        clientId: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchAssessRisk"
  ): TypedContractMethod<
    [_ages: BigNumberish[], _incomes: BigNumberish[], _clientIds: string[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllClientIds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAssessmentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAssessmentResult"
  ): TypedContractMethod<
    [_clientId: string],
    [
      [bigint, bigint, boolean, bigint] & {
        creditLimit: bigint;
        riskScore: bigint;
        approved: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBatchAssessmentResults"
  ): TypedContractMethod<
    [_clientIds: string[]],
    [RiskControl.AssessmentResultStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRiskParameters"
  ): TypedContractMethod<[], [RiskControl.RiskParametersStructOutput], "view">;
  getFunction(
    nameOrSignature: "riskParameters"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { incomeMultiplier: bigint; riskThreshold: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRiskParameters"
  ): TypedContractMethod<
    [_incomeMultiplier: BigNumberish, _riskThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AssessmentPerformed"
  ): TypedContractEvent<
    AssessmentPerformedEvent.InputTuple,
    AssessmentPerformedEvent.OutputTuple,
    AssessmentPerformedEvent.OutputObject
  >;
  getEvent(
    key: "BatchAssessmentPerformed"
  ): TypedContractEvent<
    BatchAssessmentPerformedEvent.InputTuple,
    BatchAssessmentPerformedEvent.OutputTuple,
    BatchAssessmentPerformedEvent.OutputObject
  >;
  getEvent(
    key: "ParametersUpdated"
  ): TypedContractEvent<
    ParametersUpdatedEvent.InputTuple,
    ParametersUpdatedEvent.OutputTuple,
    ParametersUpdatedEvent.OutputObject
  >;

  filters: {
    "AssessmentPerformed(string,uint256,uint256,bool,uint256)": TypedContractEvent<
      AssessmentPerformedEvent.InputTuple,
      AssessmentPerformedEvent.OutputTuple,
      AssessmentPerformedEvent.OutputObject
    >;
    AssessmentPerformed: TypedContractEvent<
      AssessmentPerformedEvent.InputTuple,
      AssessmentPerformedEvent.OutputTuple,
      AssessmentPerformedEvent.OutputObject
    >;

    "BatchAssessmentPerformed(uint256,uint256)": TypedContractEvent<
      BatchAssessmentPerformedEvent.InputTuple,
      BatchAssessmentPerformedEvent.OutputTuple,
      BatchAssessmentPerformedEvent.OutputObject
    >;
    BatchAssessmentPerformed: TypedContractEvent<
      BatchAssessmentPerformedEvent.InputTuple,
      BatchAssessmentPerformedEvent.OutputTuple,
      BatchAssessmentPerformedEvent.OutputObject
    >;

    "ParametersUpdated(uint256)": TypedContractEvent<
      ParametersUpdatedEvent.InputTuple,
      ParametersUpdatedEvent.OutputTuple,
      ParametersUpdatedEvent.OutputObject
    >;
    ParametersUpdated: TypedContractEvent<
      ParametersUpdatedEvent.InputTuple,
      ParametersUpdatedEvent.OutputTuple,
      ParametersUpdatedEvent.OutputObject
    >;
  };
}
